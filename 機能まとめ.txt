※どのデータをどこに、どのように送っているか分かるようにする。
#環境構築
1.デバッグバーの挿入
・laravelDebugbarを導入、コマンドプロンプトで「composer require barryvdh/laravel-debugbar」で実行
2.初期データの登録
忘れた…

#機能追加(共通)
1.usersテーブルとsubjectテーブルのリレーションを定義
users.phpとsubject.php内にリレーションの記述をする。順番は（リレーションするモデル名,リレーションするテーブル名,自モデルの主キー,相手モデルの主キー）
一対多→hasMany
多対多→belongsToMany
参考サイト→https://moripro.net/laravel-hasmany-belongsto/

2.ユーザーの新規登録画面にバリデーションを追加
新規登録画面「RegisterRequest」
コマンドプロンプトで「php artisan make:request RegisterRequest」でバリデーション用のクラスを作成
public function authorize()のreturn false;をtureにする。じゃないとバリデーションが表示されない。
public function rules()｛この中｝この中にバリデーションメッセージを記入する。
生年月日に関して、$thisの変数の中にinputで年月日をまとめて$birth_dayとする。

3.サイドバーの項目の一部を講師アカウントのみに表示させる。
サイドバー「sidebar.blade.php」の中で
スクール予約確認とスクール枠登録部分を権限のif文で囲む。
@if(!(Auth::user()->role == 4))
～～
@endif
#バグ(共通)
1.タイムアウトするとエラーが表示される
「Authenticate.php」の中でタイムアウトした時の遷移先をログイン画面にする。
「.env」内でタイムアウトの時間を設定する。
→タイムアウトするとエラー画面ではなく、指定時間以上経つと、ログイン画面に戻るようにした。

#機能追加(掲示板)
1.投稿の編集/削除
編集と削除のボタンとモーダル表示作成
また、自分の投稿だけに対して編集/削除ボタンを表示させる。
@if (Auth::user()->id == $post->user_id)
～～
@endif
「CommentRequest」投稿のコメントのバリデーションとバリデーションメッセージを設定する。
編集/削除ボタンが押された際、編集メソッド、削除メソッドが行われるルーティングを記載。
編集「post Edit」メソッド
タイトルと投稿を編集できる。
削除「post Delete」メソッド
削除した後は投稿画面に戻る。

2.いいねの数を表示
「posts.blade」内でいいねの数を表示する記述を書く{{ $post->likes->count() }}で表示
投稿「post.php」いいね「like.php」をリレーションする。”一人のユーザー”が”多数をいいね”するから一対多

3.コメントの数を表示
「posts.blade」内でコメントの数を表示する記述を書く{{$post->postComments->count()}}で表示

4.サブカテゴリーの追加
「post_create.blade」で選択したメインカテゴリー内にサブカテゴリーを追加。
一つのメインカテゴリーの中に複数のサブカテゴリーを登録するから一対多の関係でリレーション
「PostController」内でメインカテゴリーIDの中にサブカテゴリーを入れられるようにする。

5.サブカテゴリーでの検索
「post_create.blade」のカテゴリー検索部分で、サブカテゴリーを選択するとそのサブカテゴリーの投稿が表示される。

#機能追加(ユーザー検索)
1.一覧画面で選択科目の表示
「profile.blade」内で選択科目の表示をさせる。@foreachでデータを取得し、選択科目を取得する。
2.検索条件欄に選択科目の表示を追加
「search.blade.php」で右側サイドバーの検索部分を調整
3.選択科目での検索機能を追加
@foreachで選択科目を取得して、検索できるようにする。

#機能追加(スクール予約)
1.予約画面の表示形式を変更
「CalendarView.php」で背景色をグレーに、過去日だったら～や、未来日だったら～をif,else文使って、過去日は受付終了と表示する。　予約した日は参加した部を表示し、そのボタンを押すとキャンセルできるモーダルが表示される。

2.予約をキャンセルをするための確認画面を追加
予約した部のボタンを押すとjava(modal-cancel)でモーダル表示
3.予約をキャンセルする機能を追加
今回のキャンセルは完全に消すわけじゃなく、枠を一つ戻す必要があるため、登録した部数を戻すとなると、「increment」で一回分戻す

4.予約している人数を表示
「CalendarWeekDay.php」内の各部が表示されている隣に、
count($one_part->users)～count($three_part->users)の記述をそれぞれ行う。

5.スクール予約画面の各部数にリンクを設置する
遷移リンクを設置し、ユーザー詳細画面に移動・
6.予約詳細ページにユーザー情報を表示する
「reserve_detail.blade」内で@foreach文を使って予約されているユーザーと名前を取得する。(現状リモートしかない為、リモートor対面の取得は必要ない。)
