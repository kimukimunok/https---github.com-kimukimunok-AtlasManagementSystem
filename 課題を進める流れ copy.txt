システム改修とは
既存の物を変更改良拡張する事
1機能の追加
→新機能や、既存機能を変更したり
2バグ修正
→バグの問題を特定し修正する
3性能の最適化
→システム性のを現状の性能に適応させる。
4セキュリティの向上
→セキュリティは常に脅威にさらされている為新たな脅威に対処する為のセキュリティ強化や脆弱性の修正を行う
5規制要件への適合
→法律や規制が変更された際、新しい法的要件に適合する為の変更を行う。
6テクノロジーの更新
→新しい技術を使用することにより、効率性や競争率を向上させる。

・システム改修のメリット
１利用者が慣れている既存システムをそのまま使い続けることが出来る
２システムを1から作り直すのではない為コストカットできる
＠反対に保守性の低いシステムを作ると、メンバーがコード解読に時間が掛かり想定していないエラーが出たり時間が掛かる
運用保守、使いやすく、見やすい物を作る必要がある。

得なきゃいけない必須のスキル
１コード解読能力
→第三者のコードを読み解く能力もそうだが、色んなデータの送り方、処理の仕方、色々ある為知識は多岐に渡らなければならない。
また、PHP→JAVAへの機能移し替えの際も2言語の知識とデータがどう置き換わるのか、専門的な知識が必要

コード解読が出来ないと起こり得ること
・セキュリティリスクの増加
第三者のコードを理解していないと悪意のあるコードや、セキュリティの問題に気付かない
・バグの増加
コードを理解していないとバグの混入が増える。
バグはコストと時間の浪費に繋がり、UXユーザーエクスペリエンスを悪化させる。
・保守性の低下
第三者のコードを理解せず進めた場合、保守性が大幅に低下し、小さな仕様変更でも多大な時間が掛かり、将来的に変更や更新がしずらくなる。
どの人が見ても分かりやすいコードを徹底する。
→→→第三者のコードの記述ルールにのっとり書くと、作業効率の上昇や共有のしやすさコストカット色々メリットがある。
また、読み解く能力はどの現場でも必要とされるためキャリア向上にもつながる。



進め方
コードを書いたり更新したりする前に、この機能はどう動いたら正しいか、ということを説明できるように整理する事
プログラミング的思考を書き出して計画性を可視化する事
例えば
前回のSNS課題の場合
ユーザーのつぶやきを投稿する。はこう表現される。
１Viewテンプレートから投稿内容をControllerへ送信する。name属性は「post」に設定。
↓
２Controllerに作成したメソッドに投稿をしたユーザー（ログインユーザー）のIDを変数「$login_user_id」で取得する。
↓
３ログインユーザーのID変数に加えて、Viewから送られてきた投稿内容も変数「$login_user_post」で定義する。投稿内容はinput(‘post’)で受け取る。
↓
４2つの変数を使用して、postsテーブルに値を登録する。「user_id」カラムには$login_user_idを登録し、「post」カラムには$login_user_postを登録する。
↓
５上記の記述で、postsテーブルに1つのレコードが追加される。ターミナルからMySQLに接続しSQLクエリを実行したり、phpMyAdminなどで確認することができる。
↓
６登録ができていることを確認したら、Viewに飛ぶようにreturnを設定する。今回は、ページを表示させるメソッドが準備されているので、そのメソッドに飛ぶようにreturn redirect()を使用する。

機能実装の内容が正しいか迷った際は、講師に「壁打ち」という話を聞いてもらい考えを整理する事として使う。
アドバイスや意見、答えを求めるのではなく、考えの整理を目的として行う。

!!!講師に話す時間は10分程度、壁打ちする内容は決めてから話しかけること!!!

①壁打ちをお願いする、②分かっていることから順番に話す、③どこからあいまいになっているかを相談する
壁打ちをするときは、間違っていてもいいので自身でゴールを予測してから相談しましょう。


課題の流れ
①各資料を読み解いていく
システムの要件をまとめた要件定義書で、プロジェクトのルールや目的を把握しましょう。
②現状運用されているLaravelデータを把握する
機能をいきなり実装するのではなく、じっくりコードを読み込んで何を書くべきなのかを考察していきましょう。
③バグ・新規の機能を実装する
進め方はこれまでと同様
１タスクを洗い出す。
２タスクを処理する順番を構築する。
３締め切り日を決定する。
４実際に環境構築タスクから取り組んでいく。

講師との壁打ちや相談をしながら、一人で黙々と取り組むのではなく、意見のすり合わせを積極的におこなって機能実装を成し遂げましょう。


④機能を編集したらプッシュ・チケットの更新をする
やり取りはGithubで
機能実装が完了したらプッシュして講師に確認をもらう。
Redmineを使用してやりとりもおこなう。
Githubにプッシュ→Redmineで実装完了報告
